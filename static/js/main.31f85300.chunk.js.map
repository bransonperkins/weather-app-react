{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","time_day","city","country","temperature","humidity","wind","description","alt","src","icon","error","zipcode_to_timezone","require","API_KEY","process","App","state","undefined","e","a","preventDefault","zip_code","target","elements","zipcode","value","fetch","weather_Api","json","data","icon_code","weather","iconurl","zone_name","lookup","timezone","moment","tz","zoneAbbr","setState","format","Math","round","main","temp","sys","speed","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.31f85300.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather App</h1>\r\n        <p className=\"title-container__subtitle\">Find out temperature, conditions and more...</p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getWeather}>\r\n        <input type=\"text\" name=\"zipcode\" placeholder=\"Enter Zip Code Here\" />\r\n        <button>How's the weather?</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n    <div className=\"weather__info\">\r\n        { props.time_day && <p className=\"weather__key\">Time: \r\n            <span className=\"weather__value\"> { props.time_day } </span>\r\n        </p>\r\n        }\r\n        { props.city && props.country && <p className=\"weather__key\">Location: \r\n            <span className=\"weather__value\"> { props.city }, { props.country }</span>\r\n        </p>\r\n        }\r\n        { props.temperature && <p className=\"weather__key\">Temperature: \r\n            <span className=\"weather__value\"> { props.temperature }Â°F</span>\r\n        </p> \r\n        }\r\n        { props.humidity && <p className=\"weather__key\">Humidity: \r\n            <span className=\"weather__value\"> { props.humidity }% </span>\r\n        </p> \r\n        }\r\n        { props.wind && <p className=\"weather__key\">Wind: \r\n            <span className=\"weather__value\"> { props.wind } MPH </span>\r\n        </p> \r\n        }\r\n        { props.description && <p className=\"weather__key\">Conditions: \r\n            <span className=\"weather__value\"> { props.description } <img className=\"img-fluid\" alt=\"weatherIcon\" src={ props.icon } /> </span>\r\n        </p>\r\n        }\r\n        { props.error && <p className=\"weather__error\">{ props.error }</p>}\r\n    </div>\r\n);\r\n\r\nexport default Weather;","import React from 'react';\nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\nimport moment from 'moment'\nimport 'moment-timezone'\n\nvar zipcode_to_timezone = require( 'zipcode-to-timezone' );\nconst API_KEY = process.env.REACT_APP_OW_API_KEY;\n\nclass App extends React.Component {\n  state = {\n    time_day: undefined,\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    wind: undefined,\n    description: undefined,\n    icon: undefined,\n    error: undefined\n  }\n\n  // using async await API call\n  getWeather = async (e) => {\n    e.preventDefault();\n    const zip_code = e.target.elements.zipcode.value;\n    const weather_Api = await fetch(`https://api.openweathermap.org/data/2.5/weather?zip=${zip_code}&appid=${API_KEY}&units=imperial`);\n    const data = await weather_Api.json();\n    var icon_code = data.weather[0].icon;\n    var iconurl = \"https://openweathermap.org/img/w/\" + icon_code + \".png\";\n    var zone_name = zipcode_to_timezone.lookup(zip_code);\n    var timezone = moment.tz([2012, 0], zone_name).zoneAbbr()\n    if (zip_code) {\n      this.setState({\n        time_day: (moment().format('h:mm A ') + timezone + moment().format(' dddd')),\n        temperature: Math.round(data.main.temp),\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        wind: Math.round(data.wind.speed),\n        description: data.weather[0].description,\n        icon: iconurl,\n        error: \"\"\n      })\n    } else {\n      this.setState({\n        time_day: undefined,\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        wind: undefined,\n        description: undefined,\n        icon: undefined,\n        error: \"Please enter a valid location.\"\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"main\">\n          <div className=\"content\">\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-md-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-md-7 form-container\">\n                <Form getWeather={this.getWeather}/>\n                <Weather \n                  time_day={this.state.time_day}\n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  wind={this.state.wind}\n                  description={this.state.description}\n                  icon={this.state.icon}\n                  error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}